# -*- coding: utf-8 -*-
"""malware-detection-using-machine-learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C5hwn8rhUKNwdljOhrRznFQjOZXsS3U2

**Malware Detection Using Machine Learning**

Ramika Nag
ENG20CY0034
"""

malData.head()

malData.shape

legit= malData[0:41323].drop(["legitimate"], axis=1)
mal= malData[41323::].drop(["legitimate"], axis=1)
print("The shape of the legit dataset is: %s samples, %s features"%(legit.shape[0],legit.shape[1]))
print("The shape of the mal dataset is: %s samples, % s features" %(mal.shape[0],mal.shape[1]))

fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
ax.hist(malData['legitimate'],20)
plt.show()

#Data Cleaning
y=malData['legitimate']
malData=malData.drop(['legitimate'],axis=1)

malData=malData.drop(['Name'],axis=1)
malData=malData.drop(['md5'],axis=1)
print(" The Name and md5 variables are removed successfully")

#Spliting
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(malData,y, test_size=0.2, random_state=42)

X_train.shape

#Model Building
#Random Forest
from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import make_classification
clf = RandomForestClassifier(max_depth=2, random_state=0)
randomModel=clf.fit(X_train, y_train)

from sklearn.metrics import f1_score,accuracy_score,auc,confusion_matrix

#Accuracy(Train Dataset)
train_pred=randomModel.predict(X_train)
accuracy_score(y_train,train_pred)

# Accuracy(Test Dataset)
prediction=randomModel.predict(X_test)
accuracy_score(y_test,prediction)

#Logistic Regression
from sklearn.linear_model import LogisticRegression
clf = LogisticRegression(random_state=0)
logModel=clf.fit(X_train, y_train)

# Accuracy(train dataset)
train_log= logModel.predict(X_train)
accuracy_score(y_train,train_log)

# Accuracy(test dataset)
pred=logModel.predict(X_test)
accuracy_score(y_test,pred)

f1_score(y_test, pred)

#Neural Network
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

model = Sequential()
model.add(Dense(16, input_dim=54, activation= "relu"))
model.add(Dense(8, activation= "relu"))
model.add(Dense(4, activation= "relu"))
model.add(Dense(1, activation='sigmoid'))
model.summary()

model.compile(loss= "binary_crossentropy" , optimizer="rmsprop", metrics=["accuracy"])

model.fit(X_train, y_train, epochs=5, batch_size=32)

# Accuracy(training dataset)
trainPred=model.predict(X_train)
trainPred=[1 if y>= 0.5 else 0   for y in trainPred]
accuracy_score(y_train,trainPred)

# Accuracy(test dataset)
y_prediction=model.predict(X_test)
y_prediction=[1 if y>= 0.5 else 0   for y in y_prediction]
accuracy_score(y_test, y_prediction)

confusion_matrix(y_test,y_prediction)

f1_score(y_test,y_prediction)